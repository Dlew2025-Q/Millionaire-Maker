# Dockerfile for the React Frontend
# This uses a multi-stage build to create a small, efficient production container.

# --- Stage 1: Build the React Application ---
FROM node:18-alpine AS build

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json (if available)
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application source code
COPY . .

# Build the React app for production
# This creates a 'build' folder with all the static files.
RUN npm run build


# --- Stage 2: Serve the Application ---
# This stage uses a lightweight Node.js image to serve the built files.
FROM node:18-alpine

WORKDIR /app

# Copy the package.json to install the 'serve' package
COPY package*.json ./
RUN npm install --production

# Copy the built static files from the 'build' stage
COPY --from=build /app/build ./build

# Expose the port the 'serve' package will run on
EXPOSE 3000

# The command to start the server.
# 'serve -s build' serves the contents of the 'build' directory.
# '-l 3000' tells it to listen on port 3000. Render will handle mapping this port.
CMD ["npx", "serve", "-s", "build", "-l", "3000"]
